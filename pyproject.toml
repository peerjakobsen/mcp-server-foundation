[project]
name = "mcp-server-foundation"
version = "0.1.0"
description = "Enterprise-ready Model Context Protocol server foundation with dual-mode deployment"
readme = "README.md"
requires-python = ">=3.13.0"
license = { text = "MIT" }
authors = [
    { name = "Peer Jakobsen", email = "peer.jakobsen@gmail.com" }
]
keywords = ["mcp", "ai", "enterprise", "fastmcp", "model-context-protocol"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core MCP Framework
    "fastmcp>=2.11.0",

    # Configuration Management
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",

    # Async Web Framework
    "uvicorn>=0.24.0",
    "fastapi>=0.104.0",

    # Database & Storage
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",

    # Authentication & Security
    "authlib>=1.3.0",
    "pycasbin>=1.25.0",
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",

    # Observability & Monitoring
    "opentelemetry-api>=1.36.0",
    "opentelemetry-sdk>=1.36.0",
    "opentelemetry-instrumentation-fastapi>=0.47b0",
    "opentelemetry-instrumentation-asyncpg>=0.47b0",
    "opentelemetry-exporter-prometheus>=0.47b0",
    "prometheus-client>=0.19.0",
    "structlog>=24.1.0",

    # Development & Local Storage
    "keyring>=24.0.0",
    "watchfiles>=0.21.0",

    # Utilities
    "python-multipart>=0.0.6",
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.1",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",

    # Code Quality
    "ruff>=0.12.8",
    "mypy>=1.17.1",
    "bandit>=1.7.5",
    "safety>=3.0.0",

    # Development Tools
    "pre-commit>=4.0.0",
    "ipython>=8.18.0",
    "rich>=13.7.0",
]

cloud-aws = [
    "boto3>=1.34.0",
    "boto3-stubs[essential]>=1.34.0",
]

cloud-azure = [
    "azure-storage-blob>=12.19.0",
    "azure-identity>=1.15.0",
    "azure-keyvault-secrets>=4.7.0",
]

cloud-gcp = [
    "google-cloud-storage>=2.10.0",
    "google-cloud-secret-manager>=2.18.0",
    "google-auth>=2.25.0",
]

all = [
    "mcp-server-foundation[dev,cloud-aws,cloud-azure,cloud-gcp]",
]

[project.urls]
Homepage = "https://github.com/your-org/mcp-server-foundation"
Repository = "https://github.com/your-org/mcp-server-foundation"
Documentation = "https://your-org.github.io/mcp-server-foundation"
Issues = "https://github.com/your-org/mcp-server-foundation/issues"

[project.scripts]
mcp-server = "mcp_server.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_server"]

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "S",   # bandit security
]
ignore = [
    "E501",  # line too long, handled by formatter
    "S101",  # use of assert for tests
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "ARG", "S106"]

[tool.mypy]
python_version = "3.13"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
