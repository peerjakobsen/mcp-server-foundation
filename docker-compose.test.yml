# Docker Compose for local testing services
# Use with: docker-compose -f docker-compose.test.yml up -d
# This provides PostgreSQL and Redis services for integration tests

services:
  postgres-test:
    image: postgres:17-alpine
    container_name: mcp-postgres-test
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  redis-test:
    image: redis:7-alpine
    container_name: mcp-redis-test
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - test-network

  # Optional: Test runner container that can connect to services
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-test-runner
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://testuser:testpass@postgres-test:5432/testdb
      - REDIS_URL=redis://redis-test:6379/0
      - DEPLOYMENT_MODE=docker
      - SECRET_KEY=test-secret-key
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - test_coverage:/app/coverage
    working_dir: /app
    networks:
      - test-network
    profiles:
      - test-runner

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  test_coverage:
    driver: local

networks:
  test-network:
    driver: bridge
